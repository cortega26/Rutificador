
# Generated by CodiumAI
from chile_rut.main import RutBase
from chile_rut.exceptions import RutInvalidoError


import pytest

class TestRutBase:

    # Creating a new instance of RutBase with a valid base string should set the base attribute to the normalized base string.
    def test_valid_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert rut.base == "12345678"

    # Creating a new instance of RutBase with a base string containing more than 8 digits should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "123.456.7890"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a valid base string should set the rut_original attribute to the original base string.
    def test_valid_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert rut.base == "12345678"

    # Calling str() on a RutBase instance should return the normalized base string.
    def test_str_method_returns_normalized_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert str(rut) == "12345678"

    # Creating a new instance of RutBase with a base string containing leading zeros should remove the leading zeros from the normalized base string.
    def test_remove_leading_zeros(self):
        base = "000.123.456"
        rut = RutBase(base)
        assert rut.base == "123456"

    # Creating a new instance of RutBase with a base string containing dots as thousands separators should remove the dots from the normalized base string.
    def test_remove_dots_from_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert rut.base == "12345678"

    # Creating a new instance of RutBase with a base string containing only digits should set the base attribute to the normalized base string.
    def test_valid_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert rut.base == "12345678"

    # Creating a new instance of RutBase with a base string containing non-digit characters other than dots should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "12.3a5.678"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a base string containing non-digit characters and dots should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "12.3a5.678"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a base string containing a single digit should set the base attribute to the normalized base string.
    def test_valid_base_string(self):
        base = "1"
        rut = RutBase(base)
        assert rut.base == "1"

    # Creating a new instance of RutBase with a base string containing only dots should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "........"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a base string containing a dot followed by less than 3 digits should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "12.34"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a base string containing a dot followed by more than 3 digits should raise a RutInvalidoError.
    def test_invalid_base_string(self):
        base = "12.345.6789"
        with pytest.raises(RutInvalidoError):
            RutBase(base)

    # Creating a new instance of RutBase with a base string containing a dot followed by exactly 3 digits should set the base attribute to the normalized base string.
    def test_valid_base_string(self):
        base = "12.345.678"
        rut = RutBase(base)
        assert rut.base == "12345678"

    # Creating a new instance of RutBase with an empty base string should raise a RutInvalidoError.
    def test_empty_base_string(self):
        with pytest.raises(RutInvalidoError):
            RutBase("")